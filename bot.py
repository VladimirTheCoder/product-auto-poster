import json
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
API_TOKEN = '7636580662:AAEXq-Qiaw8l7W3WGXzsDoL7V_S25xP9M9s'
CHANNEL_NAME = '@NadezhdaPetruninaBot'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
current_admin = None

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ ===
def load_products():
    try:
        with open('products.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ products.json: {e}")
        return []

PRODUCTS = load_products()

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞ ===
async def get_channel_admins():
    try:
        admins = await bot.get_chat_administrators(CHANNEL_NAME)
        return [admin.user.id for admin in admins]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {e}")
        return []

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ ===
async def is_admin(user_id):
    admins = await get_channel_admins()
    return user_id in admins

# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã ===
def format_price(price):
    try:
        price = int(float(price))
        return f"{price:,.0f}".replace(',', ' ')
    except:
        return "0"

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞ ===
async def send_product(product):
    try:
        title = product.get("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        description = product.get("–û–ø–∏—Å–∞–Ω–∏–µ", "")
        price = product.get("–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏", 0)
        product_id = product.get("ID —Ç–æ–≤–∞—Ä–∞", "")

        formatted_price = format_price(price)
        url = f"https://cleo-anima-shorts.ru/product/ {product_id}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõç –ö—É–ø–∏—Ç—å", url=url)],
            [InlineKeyboardButton(text="üìû –°–≤—è–∑—å", url="https://t.me/vash_username ")]
        ])

        message_text = (
            f"üé≠ {title}\n\n"
            f"üíµ –¶–µ–Ω–∞: {formatted_price} —Ä—É–±.\n\n"
            f"{description}\n\n"
            f"#–ù–∞–¥–µ–∂–¥–∞–ü–µ—Ç—Ä—É–Ω–∏–Ω–∞"
        )

        await bot.send_message(
            chat_id=CHANNEL_NAME,
            text=message_text,
            reply_markup=keyboard,
            parse_mode=None  # ‚Üê –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–µ–Ω Markdown
        )
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}", exc_info=True)
        return False

# === –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ ===
async def auto_post():
    index = 0
    while True:
        if not PRODUCTS:
            logging.error("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!")
            await asyncio.sleep(60)
            continue

        product = PRODUCTS[index]
        if await send_product(product):
            index = (index + 1) % len(PRODUCTS)
            logging.info(f"‚úÖ –¢–æ–≤–∞—Ä '{product.get('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏', '')}' –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
        await asyncio.sleep(60)  # –ü–∞—É–∑–∞ 1 –º–∏–Ω—É—Ç–∞

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    global current_admin

    if not await is_admin(message.from_user.id):
        await message.answer("‚õî –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞!")
        return

    if current_admin:
        await message.answer("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∫–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º.")
        return

    current_admin = message.from_user.id
    await message.answer("‚úÖ –í—ã —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –±–æ—Ç–æ–º! –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞.")
    asyncio.create_task(auto_post())

@dp.message(Command("stop"))
async def stop_cmd(message: types.Message):
    global current_admin

    if message.from_user.id != current_admin:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞!")
        return

    current_admin = None
    await message.answer("üõë –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")

@dp.message(Command("reload"))
async def reload_products_cmd(message: types.Message):
    global PRODUCTS

    if not await is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    PRODUCTS = load_products()
    await message.answer(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(PRODUCTS)} —Ç–æ–≤–∞—Ä–æ–≤.")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
    )

    try:
        logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == '__main__':
    print("–¢–æ–≤–∞—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:", len(PRODUCTS))
    if PRODUCTS:
        print("–ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä:", PRODUCTS[0])
    else:
        print("–§–∞–π–ª products.json –ª–∏–±–æ –ø—É—Å—Ç, –ª–∏–±–æ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.")
    asyncio.run(main())